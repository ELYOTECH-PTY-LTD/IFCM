{"ast":null,"code":"import axios from \"axios\";\nimport UserService from \"./UserService\";\nconst HttpMethods = {\n  GET: 'GET',\n  POST: 'POST',\n  DELETE: 'DELETE'\n};\n\nconst _axios = axios.create();\n\nconst configure = () => {\n  _axios.interceptors.request.use(config => {\n    if (UserService.isLoggedIn()) {\n      const cb = () => {\n        config.headers.Authorization = `Bearer ${UserService.getToken()}`;\n        return Promise.resolve(config);\n      };\n\n      return UserService.updateToken(cb);\n    }\n  });\n};\n\nconst getAxiosClient = () => _axios;\n\nconst HttpService = {\n  HttpMethods,\n  configure,\n  getAxiosClient\n};\nexport default HttpService;","map":{"version":3,"sources":["C:/Users/guigu/Documents/ifcm/IFCM2/IFCM/Nouveau dossier/src/services/HttpService.js"],"names":["axios","UserService","HttpMethods","GET","POST","DELETE","_axios","create","configure","interceptors","request","use","config","isLoggedIn","cb","headers","Authorization","getToken","Promise","resolve","updateToken","getAxiosClient","HttpService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,GAAG,EAAE,KADa;AAElBC,EAAAA,IAAI,EAAE,MAFY;AAGlBC,EAAAA,MAAM,EAAE;AAHU,CAApB;;AAMA,MAAMC,MAAM,GAAGN,KAAK,CAACO,MAAN,EAAf;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtBF,EAAAA,MAAM,CAACG,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,CAAiCC,MAAD,IAAY;AAC1C,QAAIX,WAAW,CAACY,UAAZ,EAAJ,EAA8B;AAC5B,YAAMC,EAAE,GAAG,MAAM;AACfF,QAAAA,MAAM,CAACG,OAAP,CAAeC,aAAf,GAAgC,UAASf,WAAW,CAACgB,QAAZ,EAAuB,EAAhE;AACA,eAAOC,OAAO,CAACC,OAAR,CAAgBP,MAAhB,CAAP;AACD,OAHD;;AAIA,aAAOX,WAAW,CAACmB,WAAZ,CAAwBN,EAAxB,CAAP;AACD;AACF,GARD;AASD,CAVD;;AAYA,MAAMO,cAAc,GAAG,MAAMf,MAA7B;;AAEA,MAAMgB,WAAW,GAAG;AAClBpB,EAAAA,WADkB;AAElBM,EAAAA,SAFkB;AAGlBa,EAAAA;AAHkB,CAApB;AAMA,eAAeC,WAAf","sourcesContent":["import axios from \"axios\";\r\nimport UserService from \"./UserService\";\r\n\r\nconst HttpMethods = {\r\n  GET: 'GET',\r\n  POST: 'POST',\r\n  DELETE: 'DELETE',\r\n};\r\n\r\nconst _axios = axios.create();\r\n\r\nconst configure = () => {\r\n  _axios.interceptors.request.use((config) => {\r\n    if (UserService.isLoggedIn()) {\r\n      const cb = () => {\r\n        config.headers.Authorization = `Bearer ${UserService.getToken()}`;\r\n        return Promise.resolve(config);\r\n      };\r\n      return UserService.updateToken(cb);\r\n    }\r\n  });\r\n};\r\n\r\nconst getAxiosClient = () => _axios;\r\n\r\nconst HttpService = {\r\n  HttpMethods,\r\n  configure,\r\n  getAxiosClient,\r\n};\r\n\r\nexport default HttpService;"]},"metadata":{},"sourceType":"module"}