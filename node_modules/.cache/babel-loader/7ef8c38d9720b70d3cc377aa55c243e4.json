{"ast":null,"code":"import Keycloak from \"keycloak-js\";\n\nconst _kc = new Keycloak('/keycloak.json');\n/**\r\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\r\n *\r\n * @param onAuthenticatedCallback\r\n */\n\n\nconst initKeycloak = onAuthenticatedCallback => {\n  _kc.init({}).then(authenticated => {\n    // if (authenticated) {\n    onAuthenticatedCallback(); // } else {\n    //   doLogin();\n    // }\n  });\n};\n\nconst doLogin = _kc.login;\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst isLoggedIn = () => !!_kc.token;\n\nconst updateToken = successCallback => _kc.updateToken(5).then(successCallback).catch(doLogin);\n\nconst getUsername = () => {\n  var _kc$tokenParsed;\n\n  return (_kc$tokenParsed = _kc.tokenParsed) === null || _kc$tokenParsed === void 0 ? void 0 : _kc$tokenParsed.preferred_username;\n};\n\nconst hasRole = roles => roles.some(role => _kc.hasRealmRole(role));\n\nconst UserService = {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  isLoggedIn,\n  getToken,\n  updateToken,\n  getUsername,\n  hasRole\n};\nexport default UserService;","map":{"version":3,"sources":["C:/Users/guigu/Documents/ifcm/IFCM2/IFCM/Nouveau dossier/src/services/UserService.js"],"names":["Keycloak","_kc","initKeycloak","onAuthenticatedCallback","init","then","authenticated","doLogin","login","doLogout","logout","getToken","token","isLoggedIn","updateToken","successCallback","catch","getUsername","tokenParsed","preferred_username","hasRole","roles","some","role","hasRealmRole","UserService"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;;AAEA,MAAMC,GAAG,GAAG,IAAID,QAAJ,CAAa,gBAAb,CAAZ;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAME,YAAY,GAAIC,uBAAD,IAA6B;AAChDF,EAAAA,GAAG,CAACG,IAAJ,CAAS,EAAT,EAEGC,IAFH,CAESC,aAAD,IAAmB;AACvB;AACAH,IAAAA,uBAAuB,GAFA,CAGvB;AACA;AACA;AACD,GARH;AASD,CAVD;;AAYA,MAAMI,OAAO,GAAGN,GAAG,CAACO,KAApB;AAEA,MAAMC,QAAQ,GAAGR,GAAG,CAACS,MAArB;;AAEA,MAAMC,QAAQ,GAAG,MAAMV,GAAG,CAACW,KAA3B;;AAEA,MAAMC,UAAU,GAAG,MAAM,CAAC,CAACZ,GAAG,CAACW,KAA/B;;AAEA,MAAME,WAAW,GAAIC,eAAD,IAClBd,GAAG,CAACa,WAAJ,CAAgB,CAAhB,EACGT,IADH,CACQU,eADR,EAEGC,KAFH,CAEST,OAFT,CADF;;AAKA,MAAMU,WAAW,GAAG;AAAA;;AAAA,4BAAMhB,GAAG,CAACiB,WAAV,oDAAM,gBAAiBC,kBAAvB;AAAA,CAApB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAYC,IAAD,IAAUtB,GAAG,CAACuB,YAAJ,CAAiBD,IAAjB,CAArB,CAA3B;;AAEA,MAAME,WAAW,GAAG;AAClBvB,EAAAA,YADkB;AAElBK,EAAAA,OAFkB;AAGlBE,EAAAA,QAHkB;AAIlBI,EAAAA,UAJkB;AAKlBF,EAAAA,QALkB;AAMlBG,EAAAA,WANkB;AAOlBG,EAAAA,WAPkB;AAQlBG,EAAAA;AARkB,CAApB;AAWA,eAAeK,WAAf","sourcesContent":["import Keycloak from \"keycloak-js\";\r\n\r\nconst _kc = new Keycloak('/keycloak.json');\r\n\r\n/**\r\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\r\n *\r\n * @param onAuthenticatedCallback\r\n */\r\nconst initKeycloak = (onAuthenticatedCallback) => {\r\n  _kc.init({    \r\n  })\r\n    .then((authenticated) => {\r\n      // if (authenticated) {\r\n      onAuthenticatedCallback();\r\n      // } else {\r\n      //   doLogin();\r\n      // }\r\n    })\r\n};\r\n\r\nconst doLogin = _kc.login;\r\n\r\nconst doLogout = _kc.logout;\r\n\r\nconst getToken = () => _kc.token;\r\n\r\nconst isLoggedIn = () => !!_kc.token;\r\n\r\nconst updateToken = (successCallback) =>\r\n  _kc.updateToken(5)\r\n    .then(successCallback)\r\n    .catch(doLogin);\r\n\r\nconst getUsername = () => _kc.tokenParsed?.preferred_username;\r\n\r\nconst hasRole = (roles) => roles.some((role) => _kc.hasRealmRole(role));\r\n\r\nconst UserService = {\r\n  initKeycloak,\r\n  doLogin,\r\n  doLogout,\r\n  isLoggedIn,\r\n  getToken,\r\n  updateToken,\r\n  getUsername,\r\n  hasRole,\r\n};\r\n\r\nexport default UserService;"]},"metadata":{},"sourceType":"module"}