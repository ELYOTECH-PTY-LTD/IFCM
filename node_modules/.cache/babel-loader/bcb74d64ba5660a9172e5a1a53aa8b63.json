{"ast":null,"code":"//const { Storage } = Plugins;\nconst dataUrl = '/assets/data/data.json'; //const [data type AppState, setData] = useState(false);\n\nconsole.log(\"début\");\nexport const getAppData = async () => {\n  console.log(\"lecture du fichier data.json\");\n  const response = await Promise.all([fetch(dataUrl)]);\n  console.log(response);\n  const responseData = await response[0].json();\n  console.log(responseData);\n  const events = responseData.Event;\n  /*teachings = responseData.Teaching as Teaching[];\n   const teachinglessons = parseTeachings(teachings);\n   const shopping = responseData.Shopping as Shopping[];\n  const shoppingitems = await response[1].json() as Location[];\n  \n  const data = {\n    events,\n    teachings,\n    shopping,\n    teachinglessons,\n    shoppingitems,\n  }\n  */\n\n  const data = {\n    events\n  };\n  console.log(data);\n  console.log(\"fin\");\n  return data;\n};\nexport const loadAppData = () => async dispatch => {\n  const data = await getAppData(); // dispatch(setData(data));\n};\n/*\nexport const loadConfData = () => async (dispatch: React.Dispatch<any>) => {\n  dispatch(setLoading(true));\n  const data = await getConfData();\n  dispatch(setData(data));\n  dispatch(setLoading(false));\n}\n\nexport const setLoading = (isLoading: boolean) => ({\n  type: 'set-conf-loading',\n  isLoading\n} as const);\n\nexport const setData = (data: Partial<ConfState>) => ({\n  type: 'set-conf-data',\n  data\n} as const);\n\nfunction parseTeachings(teaching: Teaching) {\n  const lessons: TeachingLesson[] = [];\n  teaching.forEach(){\n    lessons.push();\n  });\n  return lessons;\n}\n\n*/\n\n/* \nconst HAS_LOGGED_IN = 'hasLoggedIn';\nconst HAS_SEEN_TUTORIAL = 'hasSeenTutorial';\nconst USERNAME = 'username';\n\nexport const setIsLoggedInData = async (isLoggedIn: boolean) => {\n  await Storage.set({ key: HAS_LOGGED_IN, value: JSON.stringify(isLoggedIn) });\n}\n\nexport const setHasSeenTutorialData = async (hasSeenTutorial: boolean) => {\n  await Storage.set({ key: HAS_SEEN_TUTORIAL, value: JSON.stringify(hasSeenTutorial) });\n}\n\nexport const setUsernameData = async (username?: string) => {\n  if (!username) {\n    await Storage.remove({ key: USERNAME });\n  } else {\n    await Storage.set({ key: USERNAME, value: username });\n  }\n}\n\nexport const getUserData = async () => {\n  const response = await Promise.all([\n    Storage.get({ key: HAS_LOGGED_IN }),\n    Storage.get({ key: HAS_SEEN_TUTORIAL }),\n    Storage.get({ key: USERNAME })]);\n  const isLoggedin = await response[0].value === 'true';\n  const hasSeenTutorial = await response[1].value === 'true';\n  const username = await response[2].value || undefined;\n  const data = {\n    isLoggedin,\n    hasSeenTutorial,\n    username\n  }\n  return data;\n}\n\n*/","map":{"version":3,"sources":["/Users/rtchudjo/ifcmv8/src/data/dataApi.ts"],"names":["dataUrl","console","log","getAppData","response","Promise","all","fetch","responseData","json","events","Event","data","loadAppData","dispatch"],"mappings":"AAKA;AAGA,MAAMA,OAAO,GAAG,wBAAhB,C,CAEA;;AACAC,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEA,OAAO,MAAMC,UAAU,GAAG,YAAY;AAEpCF,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAGA,QAAME,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACC,KAAK,CAACP,OAAD,CAAN,CAAZ,CAAvB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AAEA,QAAMI,YAAY,GAAG,MAAMJ,QAAQ,CAAC,CAAD,CAAR,CAAYK,IAAZ,EAA3B;AAEAR,EAAAA,OAAO,CAACC,GAAR,CAAYM,YAAZ;AAEA,QAAME,MAAM,GAAGF,YAAY,CAACG,KAA5B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAME,QAAMC,IAAI,GAAG;AACXF,IAAAA;AADW,GAAb;AAIAT,EAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;AAEAX,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAEA,SAAOU,IAAP;AACD,CA1CM;AA6CP,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOC,QAAP,IAAyC;AAExE,QAAMF,IAAI,GAAG,MAAMT,UAAU,EAA7B,CAFwE,CAGzE;AAGA,CANM;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Plugins } from '@capacitor/core';\nimport { useState } from 'react';\nimport { Event, Shopping,ShoppingItem, Teaching, TeachingLesson, } from '../data/model';\n\n\n//const { Storage } = Plugins;\n\n\nconst dataUrl = '/assets/data/data.json';\n\n//const [data type AppState, setData] = useState(false);\nconsole.log(\"début\");\n\nexport const getAppData = async () => {\n\n  console.log(\"lecture du fichier data.json\");\n\n  \n  const response = await Promise.all([fetch(dataUrl)]);\n\n  console.log(response);\n\n  const responseData = await response[0].json();\n\n  console.log(responseData);\n\n  const events = responseData.Event as Event[];\n\n  /*teachings = responseData.Teaching as Teaching[];\n\n  const teachinglessons = parseTeachings(teachings);\n\n  const shopping = responseData.Shopping as Shopping[];\n  const shoppingitems = await response[1].json() as Location[];\n \n\n  const data = {\n    events,\n    teachings,\n    shopping,\n    teachinglessons,\n    shoppingitems,\n  }\n\n */\n\n  const data = {\n    events\n  }\n\n  console.log(data);\n\n  console.log(\"fin\");\n\n  return data;\n}\n\n\nexport const loadAppData = () => async (dispatch: React.Dispatch<any>) => {\n\n  const data = await getAppData();\n // dispatch(setData(data));\n\n\n}\n\n/*\nexport const loadConfData = () => async (dispatch: React.Dispatch<any>) => {\n  dispatch(setLoading(true));\n  const data = await getConfData();\n  dispatch(setData(data));\n  dispatch(setLoading(false));\n}\n\nexport const setLoading = (isLoading: boolean) => ({\n  type: 'set-conf-loading',\n  isLoading\n} as const);\n\nexport const setData = (data: Partial<ConfState>) => ({\n  type: 'set-conf-data',\n  data\n} as const);\n\nfunction parseTeachings(teaching: Teaching) {\n  const lessons: TeachingLesson[] = [];\n  teaching.forEach(){\n    lessons.push();\n  });\n  return lessons;\n}\n\n*/\n/* \nconst HAS_LOGGED_IN = 'hasLoggedIn';\nconst HAS_SEEN_TUTORIAL = 'hasSeenTutorial';\nconst USERNAME = 'username';\n\nexport const setIsLoggedInData = async (isLoggedIn: boolean) => {\n  await Storage.set({ key: HAS_LOGGED_IN, value: JSON.stringify(isLoggedIn) });\n}\n\nexport const setHasSeenTutorialData = async (hasSeenTutorial: boolean) => {\n  await Storage.set({ key: HAS_SEEN_TUTORIAL, value: JSON.stringify(hasSeenTutorial) });\n}\n\nexport const setUsernameData = async (username?: string) => {\n  if (!username) {\n    await Storage.remove({ key: USERNAME });\n  } else {\n    await Storage.set({ key: USERNAME, value: username });\n  }\n}\n\nexport const getUserData = async () => {\n  const response = await Promise.all([\n    Storage.get({ key: HAS_LOGGED_IN }),\n    Storage.get({ key: HAS_SEEN_TUTORIAL }),\n    Storage.get({ key: USERNAME })]);\n  const isLoggedin = await response[0].value === 'true';\n  const hasSeenTutorial = await response[1].value === 'true';\n  const username = await response[2].value || undefined;\n  const data = {\n    isLoggedin,\n    hasSeenTutorial,\n    username\n  }\n  return data;\n}\n\n*/\n"]},"metadata":{},"sourceType":"module"}