{"ast":null,"code":"import Keycloak from \"keycloak-js\";\n\nconst _kc = new Keycloak('/keycloak.json');\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\n\n\nconst initKeycloak = onAuthenticatedCallback => {\n  _kc.init({\n    onLoad: 'onLoad'\n  }).then(authenticated => {\n    // if (authenticated) {\n    onAuthenticatedCallback(); // } else {\n    //   doLogin();\n    // }\n  });\n};\n\nconst doLogin = _kc.login;\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst isLoggedIn = () => !!_kc.token;\n\nconst updateToken = successCallback => _kc.updateToken(5).then(successCallback).catch(doLogin);\n\nconst getUsername = () => {\n  var _kc$tokenParsed;\n\n  return (_kc$tokenParsed = _kc.tokenParsed) === null || _kc$tokenParsed === void 0 ? void 0 : _kc$tokenParsed.preferred_username;\n};\n\nconst hasRole = roles => roles.some(role => _kc.hasRealmRole(role));\n\nconst UserService = {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  isLoggedIn,\n  getToken,\n  updateToken,\n  getUsername,\n  hasRole\n};\nexport default UserService;","map":{"version":3,"sources":["/Users/elyotech/Documents/IFCM_V6/src/services/UserService.js"],"names":["Keycloak","_kc","initKeycloak","onAuthenticatedCallback","init","onLoad","then","authenticated","doLogin","login","doLogout","logout","getToken","token","isLoggedIn","updateToken","successCallback","catch","getUsername","tokenParsed","preferred_username","hasRole","roles","some","role","hasRealmRole","UserService"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;;AAEA,MAAMC,GAAG,GAAG,IAAID,QAAJ,CAAa,gBAAb,CAAZ;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAME,YAAY,GAAIC,uBAAD,IAA6B;AAChDF,EAAAA,GAAG,CAACG,IAAJ,CAAS;AACPC,IAAAA,MAAM,EAAE;AADD,GAAT,EAIGC,IAJH,CAISC,aAAD,IAAmB;AACvB;AACAJ,IAAAA,uBAAuB,GAFA,CAGvB;AACA;AACA;AACD,GAVH;AAWD,CAZD;;AAcA,MAAMK,OAAO,GAAGP,GAAG,CAACQ,KAApB;AAEA,MAAMC,QAAQ,GAAGT,GAAG,CAACU,MAArB;;AAEA,MAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,KAA3B;;AAEA,MAAMC,UAAU,GAAG,MAAM,CAAC,CAACb,GAAG,CAACY,KAA/B;;AAEA,MAAME,WAAW,GAAIC,eAAD,IAClBf,GAAG,CAACc,WAAJ,CAAgB,CAAhB,EACGT,IADH,CACQU,eADR,EAEGC,KAFH,CAEST,OAFT,CADF;;AAKA,MAAMU,WAAW,GAAG;AAAA;;AAAA,4BAAMjB,GAAG,CAACkB,WAAV,oDAAM,gBAAiBC,kBAAvB;AAAA,CAApB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAYC,IAAD,IAAUvB,GAAG,CAACwB,YAAJ,CAAiBD,IAAjB,CAArB,CAA3B;;AAEA,MAAME,WAAW,GAAG;AAClBxB,EAAAA,YADkB;AAElBM,EAAAA,OAFkB;AAGlBE,EAAAA,QAHkB;AAIlBI,EAAAA,UAJkB;AAKlBF,EAAAA,QALkB;AAMlBG,EAAAA,WANkB;AAOlBG,EAAAA,WAPkB;AAQlBG,EAAAA;AARkB,CAApB;AAWA,eAAeK,WAAf","sourcesContent":["import Keycloak from \"keycloak-js\";\n\nconst _kc = new Keycloak('/keycloak.json');\n\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\nconst initKeycloak = (onAuthenticatedCallback) => {\n  _kc.init({\n    onLoad: 'onLoad',\n    \n  })\n    .then((authenticated) => {\n      // if (authenticated) {\n      onAuthenticatedCallback();\n      // } else {\n      //   doLogin();\n      // }\n    })\n};\n\nconst doLogin = _kc.login;\n\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst isLoggedIn = () => !!_kc.token;\n\nconst updateToken = (successCallback) =>\n  _kc.updateToken(5)\n    .then(successCallback)\n    .catch(doLogin);\n\nconst getUsername = () => _kc.tokenParsed?.preferred_username;\n\nconst hasRole = (roles) => roles.some((role) => _kc.hasRealmRole(role));\n\nconst UserService = {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  isLoggedIn,\n  getToken,\n  updateToken,\n  getUsername,\n  hasRole,\n};\n\nexport default UserService;"]},"metadata":{},"sourceType":"module"}