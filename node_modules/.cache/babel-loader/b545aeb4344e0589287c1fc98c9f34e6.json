{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guigu\\\\Documents\\\\ifcm\\\\IFCM2\\\\IFCM\\\\Nouveau dossier\\\\src\\\\index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet initOptions = {\n  url: 'https://0.0.0.0:8080/auth',\n  realm: 'MyDemo',\n  clientId: 'my-react-client',\n  onLoad: 'login-required'\n};\nlet keycloak = Keycloak(initOptions);\nkeycloak.init({\n  onLoad: initOptions.onLoad\n}).success(auth => {\n  if (!auth) {\n    window.location.reload();\n  } else {\n    console.info(\"Authenticated\");\n  } //React Render\n\n\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 21\n  }, this), document.getElementById('root'));\n  localStorage.setItem(\"react-token\", keycloak.token);\n  localStorage.setItem(\"react-refresh-token\", keycloak.refreshToken);\n  setTimeout(() => {\n    keycloak.updateToken(70).success(refreshed => {\n      if (refreshed) {\n        console.debug('Token refreshed' + refreshed);\n      } else {\n        console.warn('Token not refreshed, valid for ' + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');\n      }\n    }).error(() => {\n      console.error('Failed to refresh token');\n    });\n  }, 60000);\n}).error(() => {\n  console.error(\"Authenticated Failed\");\n});\n/*\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n*/","map":{"version":3,"sources":["C:/Users/guigu/Documents/ifcm/IFCM2/IFCM/Nouveau dossier/src/index.tsx"],"names":["React","ReactDOM","App","initOptions","url","realm","clientId","onLoad","keycloak","Keycloak","init","success","auth","window","location","reload","console","info","render","document","getElementById","localStorage","setItem","token","refreshToken","setTimeout","updateToken","refreshed","debug","warn","Math","round","tokenParsed","exp","timeSkew","Date","getTime","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAIA,IAAIC,WAAW,GAAG;AAChBC,EAAAA,GAAG,EAAE,2BADW;AACkBC,EAAAA,KAAK,EAAE,QADzB;AACmCC,EAAAA,QAAQ,EAAE,iBAD7C;AACgEC,EAAAA,MAAM,EAAE;AADxE,CAAlB;AAIA,IAAIC,QAAQ,GAAGC,QAAQ,CAACN,WAAD,CAAvB;AAEAK,QAAQ,CAACE,IAAT,CAAc;AAAEH,EAAAA,MAAM,EAAEJ,WAAW,CAACI;AAAtB,CAAd,EAA8CI,OAA9C,CAAuDC,IAAD,IAAU;AAE5D,MAAI,CAACA,IAAL,EAAW;AACPC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,GAFD,MAEO;AACHC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAb;AACH,GAN2D,CAQ5D;;;AACAhB,EAAAA,QAAQ,CAACiB,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,UAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AAEAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCd,QAAQ,CAACe,KAA7C;AACAF,EAAAA,YAAY,CAACC,OAAb,CAAqB,qBAArB,EAA4Cd,QAAQ,CAACgB,YAArD;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACbjB,IAAAA,QAAQ,CAACkB,WAAT,CAAqB,EAArB,EAAyBf,OAAzB,CAAkCgB,SAAD,IAAe;AAC5C,UAAIA,SAAJ,EAAe;AACXX,QAAAA,OAAO,CAACY,KAAR,CAAc,oBAAoBD,SAAlC;AACH,OAFD,MAEO;AACHX,QAAAA,OAAO,CAACa,IAAR,CAAa,oCACPC,IAAI,CAACC,KAAL,CAAWvB,QAAQ,CAACwB,WAAT,CAAqBC,GAArB,GAA2BzB,QAAQ,CAAC0B,QAApC,GAA+C,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAjF,CADO,GACkF,UAD/F;AAEH;AACJ,KAPD,EAOGC,KAPH,CAOS,MAAM;AACXrB,MAAAA,OAAO,CAACqB,KAAR,CAAc,yBAAd;AACH,KATD;AAYH,GAbS,EAaP,KAbO,CAAV;AAeH,CA7BD,EA6BGA,KA7BH,CA6BS,MAAM;AACXrB,EAAAA,OAAO,CAACqB,KAAR,CAAc,sBAAd;AACH,CA/BD;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport Keycloack from 'keycloak-js';\nlet initOptions = {\n  url: 'https://0.0.0.0:8080/auth', realm: 'MyDemo', clientId: 'my-react-client', onLoad: 'login-required'\n}\n\nlet keycloak = Keycloak(initOptions);\n\nkeycloak.init({ onLoad: initOptions.onLoad }).success((auth) => {\n\n    if (!auth) {\n        window.location.reload();\n    } else {\n        console.info(\"Authenticated\");\n    }\n\n    //React Render\n    ReactDOM.render(<App />, document.getElementById('root'));\n\n    localStorage.setItem(\"react-token\", keycloak.token);\n    localStorage.setItem(\"react-refresh-token\", keycloak.refreshToken);\n\n    setTimeout(() => {\n        keycloak.updateToken(70).success((refreshed) => {\n            if (refreshed) {\n                console.debug('Token refreshed' + refreshed);\n            } else {\n                console.warn('Token not refreshed, valid for '\n                    + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');\n            }\n        }).error(() => {\n            console.error('Failed to refresh token');\n        });\n\n\n    }, 60000)\n\n}).error(() => {\n    console.error(\"Authenticated Failed\");\n});\n/*\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n*/\n"]},"metadata":{},"sourceType":"module"}