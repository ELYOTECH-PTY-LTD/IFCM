{"ast":null,"code":"import React, { useContext, useMemo } from 'react';\nimport { AppContext } from './AppContext';\n;\nexport function connect({\n  mapStateToProps = () => ({}),\n  mapDispatchToProps = {},\n  component\n}) {\n  var _s = $RefreshSig$();\n\n  const Connect = ownProps => {\n    _s();\n\n    const context = useContext(AppContext);\n    const dispatchFuncs = useMemo(() => {\n      const dispatchFuncs = {};\n      Object.keys(mapDispatchToProps).forEach(key => {\n        const oldFunc = mapDispatchToProps[key];\n\n        const newFunc = (...args) => {\n          const dispatchFunc = oldFunc(...args);\n\n          if (typeof dispatchFunc === 'object') {\n            context.dispatch(dispatchFunc);\n          } else {\n            const result = dispatchFunc(context.dispatch);\n\n            if (typeof result === 'object' && result.then) {\n              result.then(dispatchObject => {\n                if (dispatchObject && dispatchObject.type) {\n                  context.dispatch(dispatchObject);\n                }\n              });\n            }\n          }\n        };\n\n        dispatchFuncs[key] = newFunc;\n      });\n      return dispatchFuncs; // eslint-disable-next-line\n    }, [mapDispatchToProps]);\n    const props = useMemo(() => {\n      return Object.assign({}, ownProps, mapStateToProps(context.state, ownProps), dispatchFuncs); // eslint-disable-next-line\n    }, [ownProps, context.state]);\n    return /*#__PURE__*/React.createElement(component, props);\n  };\n\n  _s(Connect, \"4Kdqux1uDRr/enlsUiSpGsn1yB0=\");\n\n  return /*#__PURE__*/React.memo(Connect);\n}","map":{"version":3,"sources":["C:/Users/etudiant/Documents/GitHub/IFCMV9/src/data/connect.tsx"],"names":["React","useContext","useMemo","AppContext","connect","mapStateToProps","mapDispatchToProps","component","Connect","ownProps","context","dispatchFuncs","Object","keys","forEach","key","oldFunc","newFunc","args","dispatchFunc","dispatch","result","then","dispatchObject","type","props","assign","state","createElement","memo"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,OAA5B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,cAA3B;AAQC;AAED,OAAO,SAASC,OAAT,CAA2E;AAAEC,EAAAA,eAAe,GAAG,OAAO,EAAP,CAApB;AAA+CC,EAAAA,kBAAkB,GAAG,EAApE;AAA0FC,EAAAA;AAA1F,CAA3E,EAA6Q;AAAA;;AAElR,QAAMC,OAAO,GAAIC,QAAD,IAAyB;AAAA;;AACvC,UAAMC,OAAO,GAAGT,UAAU,CAACE,UAAD,CAA1B;AAEA,UAAMQ,aAAa,GAAGT,OAAO,CAAC,MAAM;AAClC,YAAMS,aAAqC,GAAG,EAA9C;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYP,kBAAZ,EAAgCQ,OAAhC,CAAyCC,GAAD,IAAS;AAC/C,cAAMC,OAAO,GAAIV,kBAAD,CAA4BS,GAA5B,CAAhB;;AACA,cAAME,OAAO,GAAG,CAAC,GAAGC,IAAJ,KAAkB;AAChC,gBAAMC,YAAY,GAAGH,OAAO,CAAC,GAAGE,IAAJ,CAA5B;;AACA,cAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;AACpCT,YAAAA,OAAO,CAACU,QAAR,CAAiBD,YAAjB;AACD,WAFD,MAEO;AACL,kBAAME,MAAM,GAAGF,YAAY,CAACT,OAAO,CAACU,QAAT,CAA3B;;AACA,gBAAI,OAAOC,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,IAAzC,EAA+C;AAC7CD,cAAAA,MAAM,CAACC,IAAP,CAAaC,cAAD,IAAqC;AAC/C,oBAAIA,cAAc,IAAIA,cAAc,CAACC,IAArC,EAA2C;AACzCd,kBAAAA,OAAO,CAACU,QAAR,CAAiBG,cAAjB;AACD;AACF,eAJD;AAKD;AACF;AACF,SAdD;;AAeAZ,QAAAA,aAAa,CAACI,GAAD,CAAb,GAAqBE,OAArB;AACD,OAlBD;AAmBA,aAAON,aAAP,CArBkC,CAsBlC;AACD,KAvB4B,EAuB1B,CAACL,kBAAD,CAvB0B,CAA7B;AA0BA,UAAMmB,KAAK,GAAGvB,OAAO,CAAC,MAAM;AAC1B,aAAOU,MAAM,CAACc,MAAP,CAAc,EAAd,EAAkBjB,QAAlB,EAA4BJ,eAAe,CAACK,OAAO,CAACiB,KAAT,EAAgBlB,QAAhB,CAA3C,EAAsEE,aAAtE,CAAP,CAD0B,CAE1B;AACD,KAHoB,EAGlB,CAACF,QAAD,EAAWC,OAAO,CAACiB,KAAnB,CAHkB,CAArB;AAKA,wBAAO3B,KAAK,CAAC4B,aAAN,CAA+BrB,SAA/B,EAA0CkB,KAA1C,CAAP;AACD,GAnCD;;AAFkR,KAE5QjB,OAF4Q;;AAsClR,sBAAOR,KAAK,CAAC6B,IAAN,CAAWrB,OAAX,CAAP;AACD","sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { AppContext } from './AppContext';\nimport { DispatchObject } from './types';\nimport { AppState } from './state';\n\ninterface ConnectParams<TOwnProps, TStateProps, TDispatchProps> {\n  mapStateToProps?: (state: AppState, props: TOwnProps) => TStateProps,\n  mapDispatchToProps?: TDispatchProps,\n  component: React.ComponentType<any>\n};\n\nexport function connect<TOwnProps = any, TStateProps = any, TDispatchProps = any>({ mapStateToProps = () => ({} as TStateProps), mapDispatchToProps = {} as TDispatchProps, component }: ConnectParams<TOwnProps, TStateProps, TDispatchProps>): React.FunctionComponent<TOwnProps> {\n\n  const Connect = (ownProps: TOwnProps) => {\n    const context = useContext(AppContext);\n\n    const dispatchFuncs = useMemo(() => {\n      const dispatchFuncs: { [key: string]: any } = {};\n      Object.keys(mapDispatchToProps).forEach((key) => {\n        const oldFunc = (mapDispatchToProps as any)[key];\n        const newFunc = (...args: any) => {\n          const dispatchFunc = oldFunc(...args);\n          if (typeof dispatchFunc === 'object') {\n            context.dispatch(dispatchFunc);\n          } else {\n            const result = dispatchFunc(context.dispatch)\n            if (typeof result === 'object' && result.then) {\n              result.then((dispatchObject?: DispatchObject) => {\n                if (dispatchObject && dispatchObject.type) {\n                  context.dispatch(dispatchObject);\n                }\n              })\n            }\n          }\n        }\n        dispatchFuncs[key] = newFunc\n      });\n      return dispatchFuncs;\n      // eslint-disable-next-line\n    }, [mapDispatchToProps])\n\n\n    const props = useMemo(() => {\n      return Object.assign({}, ownProps, mapStateToProps(context.state, ownProps), dispatchFuncs);\n      // eslint-disable-next-line\n    }, [ownProps, context.state]);\n\n    return React.createElement<TOwnProps>(component, props);\n  }\n  return React.memo(Connect as any);\n}\n"]},"metadata":{},"sourceType":"module"}